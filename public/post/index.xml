<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on r00x</title>
    <link>http://localhost:1313/post/</link>
    <description>Recent content in Posts on r00x</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-fr</language>
    <lastBuildDate>Sat, 01 Nov 2014 17:50:10 +0100</lastBuildDate>
    <atom:link href="http://localhost:1313/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Proxy LDAP en Golang</title>
      <link>http://localhost:1313/post/ldap-en-golang/</link>
      <pubDate>Sat, 01 Nov 2014 17:50:10 +0100</pubDate>
      
      <guid>http://localhost:1313/post/ldap-en-golang/</guid>
      <description>

&lt;p&gt;Bonjour !&lt;/p&gt;

&lt;p&gt;Comme promis dans mon article précédent je vais expliquer aujourd&amp;rsquo;hui la mise en application du langage Golang pour implementer le protocole LDAP.&lt;/p&gt;

&lt;h1 id=&#34;ldap:d9e41ffe1b2963ecd5511498bdeb05c1&#34;&gt;LDAP&lt;/h1&gt;

&lt;p&gt;LDAP est un protocole permettant d&amp;rsquo;interagir avec un annuaire (LDAP = Lightweight Directory Access Protocol). Il permet à un client d&amp;rsquo;effectuer toutes sorte d&amp;rsquo;opérations standards auprès d&amp;rsquo;un serveur d&amp;rsquo;annuaire: authentification, interrogation, mise à jour et suppression d&amp;rsquo;entrées&amp;hellip;&lt;/p&gt;

&lt;p&gt;De protocole, LDAP a ensuite évolué pour représenter une norme pour les systèmes d&amp;rsquo;annuaires, incluant un modèle de données, un modèle de nommage, un modèle fonctionnel basé sur le protocole LDAP, un modèle de sécurité et un modèle de réplication (source &lt;a href=&#34;http://fr.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol&#34;&gt;Wikipedia&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;LDAP est très répandu, son implémentation existe donc déjà dans de nombreux langages. Une implémentation très connue est &lt;em&gt;Microsoft Active Directory&lt;/em&gt;. Pour tester mes développements j&amp;rsquo;ai utilisé &lt;a href=&#34;http://directory.apache.org/studio/&#34;&gt;&lt;em&gt;Apache Directory Studio&lt;/em&gt;&lt;/a&gt;, qui propose un client et un serveur LDAP, le tout embarqué dans une interface Eclipse.&lt;/p&gt;

&lt;h2 id=&#34;messages:d9e41ffe1b2963ecd5511498bdeb05c1&#34;&gt;Messages&lt;/h2&gt;

&lt;h3 id=&#34;enveloppe:d9e41ffe1b2963ecd5511498bdeb05c1&#34;&gt;Enveloppe&lt;/h3&gt;

&lt;p&gt;La structure des messages LDAP est clairement définie dans la &lt;a href=&#34;http://www.ietf.org/rfc/rfc4511.txt&#34;&gt;RFC 4511&lt;/a&gt; en utilisant la notation ASN.1 (&lt;a href=&#34;http://en.wikipedia.org/wiki/Abstract_Syntax_Notation_One&#34;&gt;Abstract Syntax Notation One&lt;/a&gt;). L&amp;rsquo;enveloppe de base de chaque message se compose ainsi:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LDAPMessage ::= SEQUENCE {
         messageID       MessageID,
         protocolOp      CHOICE {
              bindRequest           BindRequest,
              bindResponse          BindResponse,
              unbindRequest         UnbindRequest,
              searchRequest         SearchRequest,
              searchResEntry        SearchResultEntry,
              searchResDone         SearchResultDone,
              searchResRef          SearchResultReference,
              modifyRequest         ModifyRequest,
              modifyResponse        ModifyResponse,
              addRequest            AddRequest,
              addResponse           AddResponse,
              delRequest            DelRequest,
              delResponse           DelResponse,
              modDNRequest          ModifyDNRequest,
              modDNResponse         ModifyDNResponse,
              compareRequest        CompareRequest,
              compareResponse       CompareResponse,
              abandonRequest        AbandonRequest,
              extendedReq           ExtendedRequest,
              extendedResp          ExtendedResponse,
              ...,
              intermediateResponse  IntermediateResponse },
         controls       [0] Controls OPTIONAL }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Un message est donc composé de plusieurs attributs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;un identifiant&lt;/li&gt;
&lt;li&gt;une opération (connexion, recherche, modification&amp;hellip;)&lt;/li&gt;
&lt;li&gt;des options de contrôles de l&amp;rsquo;opération&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;L&amp;rsquo;opération et les contrôles sont eux-même composés d&amp;rsquo;autres attributs. La RFC4511 fourni de manière similaire la définition de toutes les structures possibles pour chaque opération permise par le protocole: bind, unbind, search &amp;hellip;&lt;/p&gt;

&lt;p&gt;Un message LDAP est donc une structure composée que l&amp;rsquo;on pourra facilement représenter par des &lt;em&gt;struct&lt;/em&gt; en langage Golang.&lt;/p&gt;

&lt;h3 id=&#34;sérialisation:d9e41ffe1b2963ecd5511498bdeb05c1&#34;&gt;Sérialisation&lt;/h3&gt;

&lt;p&gt;Une fois construit, un message LDAP doit être sérialisé pour être transmis sur le réseau.  Il faut aussi que l&amp;rsquo;interlocuteur sache le désérialiser de la même manière.&lt;/p&gt;

&lt;p&gt;La norme ASN.1, utilisée plus haut pour décrire les messages, spécifie plusieurs normes pour encoder un message en une suite d&amp;rsquo;octets. La RFC de LDAP (RFC4511) spécifie que l&amp;rsquo;encodage BER (&lt;a href=&#34;http://en.wikipedia.org/wiki/X.690#BER_encoding&#34;&gt;Basic Encoding Rule&lt;/a&gt;) doit être utilisé avec quelques restrictions:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;5.1.  Protocol Encoding&lt;/p&gt;

&lt;p&gt;The protocol elements of LDAP SHALL be encoded for exchange using the Basic Encoding Rules [BER] of [ASN.1] with the following restrictions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Only the definite form of length encoding is used.&lt;/li&gt;
&lt;li&gt;OCTET STRING values are encoded in the primitive form only.&lt;/li&gt;
&lt;li&gt;If the value of a BOOLEAN type is true, the encoding of the value octet is set to hex &amp;ldquo;FF&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;If a value of a type is its default value, it is absent.  Only some BOOLEAN and INTEGER types have default values in this protocol definition.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These restrictions are meant to ease the overhead of encoding and decoding certain elements in BER.&lt;/p&gt;

&lt;p&gt;These restrictions do not apply to ASN.1 types encapsulated inside of OCTET STRING values, such as attribute values, unless otherwise stated.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Une structure encodée au format BER se présente sous une suite d&amp;rsquo;octets qui en définissent le type, la longueur et les données. Pour une structure composée les données sont elles-mêmes une ou plusieurs sous-structures au format BER.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/2014/Oct/asn1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Maintenant que nous savons un peu plus où nous mettons les pieds, passons au développement.&lt;/p&gt;

&lt;h1 id=&#34;développement:d9e41ffe1b2963ecd5511498bdeb05c1&#34;&gt;Développement&lt;/h1&gt;

&lt;h2 id=&#34;premier-essai-encoding-asn1:d9e41ffe1b2963ecd5511498bdeb05c1&#34;&gt;Premier essai: encoding/asn1&lt;/h2&gt;

&lt;p&gt;Avant de réinventer la roue, je suis allé voir ce que proposait Golang. La librairie &lt;em&gt;encoding/asn1&lt;/em&gt; fourni des fonctions permettant de lire et d&amp;rsquo;écrire des structures mais elle présente plusieurs inconvénients:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;l&amp;rsquo;encodage se fait au format DER au lieu de BER, car la librairie est utilisée surtout pour lire les certificats SSL et non pour des structures LDAP&lt;/li&gt;
&lt;li&gt;certaines fonctionnalités sont manquantes: les tags applicatifs ne sont pas supportés par la librairie d&amp;rsquo;encodage&lt;/li&gt;

&lt;li&gt;&lt;p&gt;on doit connaître à l&amp;rsquo;avance le type de message que l&amp;rsquo;on est en train de décoder, en particulier la valeur du tag alors qu&amp;rsquo;elle est fonction du type de message LDAP. Dans l&amp;rsquo;exemple ci-dessous (issu de la librairie de test &lt;em&gt;encoding/asn1/asn1_test.go&lt;/em&gt;), l&amp;rsquo;annotation en face du champ &lt;em&gt;A&lt;/em&gt; illustre ce problème:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type TestContextSpecificTags2 struct {
    A int `asn1:&amp;quot;explicit,tag:1&amp;quot;`
    B int
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Malgré ses manques, la librairie fourni certaines fonctions de bases bien utiles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;lecture des tags&lt;/li&gt;
&lt;li&gt;lectures des valeurs de bases (entier, octet strings&amp;hellip;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;C&amp;rsquo;est lectures se font au format DER, qui reste un encodage BER valable bien que plus restrictif. Ces fonctions constituent donc une bonne base que j&amp;rsquo;ai utilisée dans un premier temps mais que j&amp;rsquo;adapterai par la suite.&lt;/p&gt;

&lt;p&gt;Ce premier contact avec l&amp;rsquo;encodage ASN.1 était instructif. Pour expérimenter, je recommande ce petit outil en javascript bien pratique: &lt;a href=&#34;http://lapo.it/asn1js/&#34;&gt;http://lapo.it/asn1js/&lt;/a&gt;. La page Wiki de &lt;a href=&#34;http://en.wikipedia.org/wiki/X.690#BER_encoding&#34;&gt;BER&lt;/a&gt; est également une bonne base.&lt;/p&gt;

&lt;h2 id=&#34;rfc-4511:d9e41ffe1b2963ecd5511498bdeb05c1&#34;&gt;RFC 4511&lt;/h2&gt;

&lt;p&gt;La &lt;a href=&#34;http://www.ietf.org/rfc/rfc4511.txt&#34;&gt;RFC 4511&lt;/a&gt; a constitué mon point de départ. Elle détaille:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;la structure des messages LDAP&lt;/li&gt;
&lt;li&gt;la manière dont le client et le serveur doivent dialoguer (identifiants de messages uniques et incrémentaux&amp;hellip;)&lt;/li&gt;
&lt;li&gt;les formats à respecter pour certains types de données spécifiques (&lt;em&gt;distinguished names&lt;/em&gt;, &lt;em&gt;numeric oid&lt;/em&gt;&amp;hellip;)&lt;/li&gt;
&lt;li&gt;comment le serveur doit traiter chaque type de message (recherche, ajout, suppression, comparaison&amp;hellip;)&lt;/li&gt;
&lt;li&gt;la liste de toutes les autres RFC nécessaires (par exemple la RFC4512 pour le format des &lt;em&gt;numeric oid&lt;/em&gt;&amp;hellip;)&lt;/li&gt;
&lt;li&gt;les codes retours possibles et leurs significations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;J&amp;rsquo;ai commencé par coder l&amp;rsquo;ensemble des structures des messages LDAP.&lt;/p&gt;

&lt;h2 id=&#34;structures:d9e41ffe1b2963ecd5511498bdeb05c1&#34;&gt;Structures&lt;/h2&gt;

&lt;p&gt;La RFC comporte une annexe récapitulant l&amp;rsquo;ensemble des structures des messages LDAP. Pour être sûr de ne rien oublier, j&amp;rsquo;ai copié cette partie dans un nouveau fichier Golang, je l&amp;rsquo;ai commentée et j&amp;rsquo;ai commencé à coder au milieu de cette RFC.&lt;/p&gt;

&lt;p&gt;Lorsque la RFC énonce ceci:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//        Control ::= SEQUENCE {
//             controlType             LDAPOID,
//             criticality             BOOLEAN DEFAULT FALSE,
//             controlValue            OCTET STRING OPTIONAL }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Je l&amp;rsquo;ai traduit par la structure Golang suivante:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type Control struct {
    controlType  LDAPOID
    criticality  BOOLEAN
    controlValue *OCTETSTRING
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cette structure utilise d&amp;rsquo;autres types également définis par la RFC, par exemple LDAPOID:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//        LDAPOID ::= OCTET STRING -- Constrained to &amp;lt;numericoid&amp;gt;
//                                 -- [RFC4512]
type LDAPOID OCTETSTRING
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On arrive au final aux types de base de Golang, par exemple un &lt;em&gt;int32&lt;/em&gt; pour les types INTEGER:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//        MessageID ::= INTEGER (0 ..  maxInt)
//
type MessageID INTEGER

//        maxInt INTEGER ::= 2147483647 -- (2^^31 - 1) --
const maxInt = INTEGER(2147483647)

type INTEGER int32
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;J&amp;rsquo;ai également utilisé les constantes définies par la RFC, ainsi voici le type &lt;em&gt;BindRequest&lt;/em&gt;. Vous remarquerez le tag applicatif &lt;em&gt;0&lt;/em&gt; et les valeurs min et max de la version:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//        BindRequest ::= [APPLICATION 0] SEQUENCE {
//             version                 INTEGER (1 ..  127),
//             name                    LDAPDN,
//             authentication          AuthenticationChoice }
const TagBindRequest = 0
const BindRequestVersionMin = 1
const BindRequestVersionMax = 127

type BindRequest struct {
    version        INTEGER
    name           LDAPDN
    authentication AuthenticationChoice
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;J&amp;rsquo;ai utilisé cette méthode de manière systématique pour traduire l&amp;rsquo;ensemble des structures des messages. Une fois terminé, le fichier &lt;em&gt;struct.go&lt;/em&gt; est auto-documenté par la RFC et ne devrait plus varier, à moins que la RFC elle-même ne soit mise à jour.&lt;/p&gt;

&lt;p&gt;Passons maintenant au décodage d&amp;rsquo;un flux d&amp;rsquo;octets en une structure LDAP Golang.&lt;/p&gt;

&lt;h2 id=&#34;décodage-des-messages:d9e41ffe1b2963ecd5511498bdeb05c1&#34;&gt;Décodage des messages&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Remarque: Pour une meilleure lisibilité de l&amp;rsquo;article, les exemples de code sont simplifiés (j&amp;rsquo;ai enlevé la gestion des erreurs).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;J&amp;rsquo;ai repris la même méthode que pour les structures: copier la RFC dans un nouveau fichier Golang, la commenter et insérer les fonctions de décodage au milieu de cette RFC.&lt;/p&gt;

&lt;p&gt;La composition des messages en structures imbriquées nous amène à un traitement récursif. Comme vu dans la partie &lt;em&gt;Sérialisation&lt;/em&gt;, chaque flux d&amp;rsquo;octet à lire comporte un tag (type) et une longueur, suivis des données. On a donc un aspect systématique pour la lecture d&amp;rsquo;une structure:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;lire le tag et vérifier que sa valeur correspond au contexte&lt;/li&gt;
&lt;li&gt;lire la longueur&lt;/li&gt;
&lt;li&gt;récupérer la quantité d&amp;rsquo;octets correspondant à la longueur&lt;/li&gt;
&lt;li&gt;lire chaque attribut de la structure&lt;/li&gt;
&lt;li&gt;si un attribut est une sous-structure, relancer la lecture sur le sous-flux d&amp;rsquo;octets correspondants&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Les trois premières étapes sont communes à toutes les structures. Je les ai factorisées dans une fonction &lt;em&gt;ReadSubBytes&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func (b Bytes) ReadSubBytes(class int, tag int, callback func(bytes Bytes)) {
    // Check tag
    tagAndLength := b.ParseTagAndLength()
    tagAndLength.Expect(class, tag, isCompound)

    // Create sub-bytes
    start := b.offset
    end := b.offset + tagAndLength.Length        
    subBytes := Bytes{offset: 0, bytes: b.bytes[start:end]}

    // Recursive process 
    callback(subBytes)

    return
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Les deux dernières étapes (lecture des attributs) dépendent du contexte. J&amp;rsquo;ai créé une fonction &lt;em&gt;readComponents&lt;/em&gt; spécifique à chaque type. Ainsi pour la structure &lt;em&gt;BindRequest&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//        BindRequest ::= [APPLICATION 0] SEQUENCE {
//             version                 INTEGER (1 ..  127),
//             name                    LDAPDN,
//             authentication          AuthenticationChoice }

func (bindrequest *BindRequest) readComponents(bytes Bytes) {
    bindrequest.version = readINTEGER(bytes)
    bindrequest.name = readLDAPDN(bytes)
    bindrequest.authentication = readAuthenticationChoice(bytes)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La lecture d&amp;rsquo;une &lt;em&gt;bindRequest&lt;/em&gt; se fait alors très simplement en appelant la fonction &lt;em&gt;ReadSubBytes&lt;/em&gt; et en lui passant la fonction &lt;em&gt;readComponents&lt;/em&gt; en paramètre:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func readBindRequest(bytes Bytes) (bindrequest BindRequest) {
    bytes.ReadSubBytes(
        classApplication,
        TagBindRequest,
        bindrequest.readComponents)
    return
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Comme pour les structures, j&amp;rsquo;ai utilisé cette méthode de manière systématique pour écrire l&amp;rsquo;ensemble des fonctions de décodages. Une fois terminé, le fichier &lt;em&gt;read.go&lt;/em&gt; fait environ 1600 lignes, avec un unique point d&amp;rsquo;entrée: la fonction &lt;em&gt;ReadLDAPMessage&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func ReadLDAPMessage(bytes Bytes) (message LDAPMessage) {
    bytes.ReadSubBytes(
        classUniversal,
        tagSequence,
        message.readLDAPMessageComponents)
    return
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nous disposons ainsi d&amp;rsquo;une librairie capable de lire un flux d&amp;rsquo;octets et de retourner la structure LDAP correspondante. C&amp;rsquo;est une étape importante !&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;étape logique suivante serait de se lancer dans l&amp;rsquo;écriture des fonctions d&amp;rsquo;encodage. Mais avant ça, j&amp;rsquo;ai voulu me motiver en testant la librarie déjà écrite.&lt;/p&gt;

&lt;h2 id=&#34;proxy-ldap:d9e41ffe1b2963ecd5511498bdeb05c1&#34;&gt;Proxy LDAP&lt;/h2&gt;

&lt;p&gt;Nous disposons d&amp;rsquo;une librairie capable de convertir un tableau d&amp;rsquo;octets en un message LDAP. Nous sommes ainsi en mesure d&amp;rsquo;écouter le trafic LDAP entre un client et un serveur. Nous pouvons donc créer un proxy LDAP.&lt;/p&gt;

&lt;h3 id=&#34;architecture:d9e41ffe1b2963ecd5511498bdeb05c1&#34;&gt;Architecture&lt;/h3&gt;

&lt;p&gt;L&amp;rsquo;algorithme du proxy est simple:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;attendre une connection d&amp;rsquo;un client&lt;/li&gt;
&lt;li&gt;segmenter le flux réseaux du client en tableaux d&amp;rsquo;octets correspondant chacun à un seul message LDAP&lt;/li&gt;
&lt;li&gt;décoder la structure du message LDAP et l&amp;rsquo;afficher dans la console&lt;/li&gt;
&lt;li&gt;transmettre le tableau d&amp;rsquo;octets original au serveur&lt;/li&gt;
&lt;li&gt;procèder de manière symétrique pour afficher les réponses en provenance du serveur&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Les goroutines nous permettent séparer au mieux les fonctions (découpage, décodage, transmission). Voici l&amp;rsquo;architecture que j&amp;rsquo;ai adoptée pour ce proxy LDAP:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/2014/Nov/ldap_proxy.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;implémentation:d9e41ffe1b2963ecd5511498bdeb05c1&#34;&gt;Implémentation&lt;/h3&gt;

&lt;p&gt;Notre proxy comporte deux connexions et trois channels:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type Proxy struct {
    name       string
    clientConn net.Conn
    serverConn net.Conn
    dumpChan   chan Message
    clientChan chan Message
    serverChan chan Message
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La boucle principale se contente d&amp;rsquo;ouvrir les connexions réseau et de démarrer le proxy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func Forward(local string, remote string) {
    listener := net.Listen(&amp;quot;tcp&amp;quot;, local)
    i := 0
    for {
        i++
        proxy := Proxy{name: fmt.Sprintf(&amp;quot;PROXY%d&amp;quot;, i)}
        proxy.clientConn = listener.Accept()
        proxy.serverConn = net.Dial(&amp;quot;tcp&amp;quot;, remote)
        go proxy.start()
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le démarrage du proxy crée les channels et lance les goroutines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func (p *Proxy) start() {
    p.dumpChan = make(chan Message)
    p.clientChan = make(chan Message)
    p.serverChan = make(chan Message)
    go p.dump()
    go p.readClient()
    go p.writeServer()
    go p.readServer()
    go p.writeClient()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;go-routines:d9e41ffe1b2963ecd5511498bdeb05c1&#34;&gt;Go routines&lt;/h3&gt;

&lt;p&gt;Les goroutines &lt;em&gt;readClient&lt;/em&gt; et &lt;em&gt;readServer&lt;/em&gt; sont similaires:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func (p *Proxy) readClient() {
    for {
        bytes = p.readLdapMessageBytes(p.clientConn)
        message := Message{bytes: *bytes}
        p.dumpChan &amp;lt;- message
        p.serverChan &amp;lt;- message
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Les goroutines &lt;em&gt;writeServer&lt;/em&gt; et &lt;em&gt;writeClient&lt;/em&gt; font juste du passe-plat pour le moment:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func (p *Proxy) writeServer() {
    for msg := range p.serverChan {
        p.serverConn.Write(msg.bytes)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enfin la goroutine de &lt;em&gt;dump&lt;/em&gt;, qui utilise une librairie de formatage histoire de rendre les structures golang lisibles dans la console:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func (p *Proxy) dump() {
    for msg := range p.dumpChan {
        // Now decode the message
        message := p.decodeMessage(msg.bytes)
        result = fmt.Sprintf(&amp;quot;%# v&amp;quot;, pretty.Formatter(message))
        log.Printf(&amp;quot;Message: %s - %s - msg %d %s\n\n&amp;quot;, p.name, msg.source, msg.id, result)
    }
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;test:d9e41ffe1b2963ecd5511498bdeb05c1&#34;&gt;Test&lt;/h3&gt;

&lt;p&gt;Il suffit de lancer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;le serveur LDAP avec Apache Directory Studio&lt;/li&gt;
&lt;li&gt;le proxy LDAP en ligne de commande&lt;/li&gt;
&lt;li&gt;le client LDAP en le connectant au port d&amp;rsquo;écoute du proxy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La suite parle d&amp;rsquo;elle-même :-)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go run proxy.go
2014/10/25 17:53:52 Listening on port :2389...
2014/10/25 17:54:07 New connection accepted
2014/10/25 17:54:07 Message: PROXY1 - CLIENT - msg 2 
message.LDAPMessage{
    messageID:  1,
    protocolOp: message.BindRequest{
        version:        3,
        name:           &amp;quot;&amp;quot;,
        authentication: &amp;quot;&amp;quot;,
    },
    controls: (*message.Controls)(nil),
}

2014/10/25 17:54:07 Message: PROXY1 - SERVER - msg 1 
message.LDAPMessage{
    messageID:  1,
    protocolOp: message.BindResponse{},
    controls:   (*message.Controls)(nil),
}

2014/10/25 17:54:07 Message: PROXY1 - CLIENT - msg 3 
message.LDAPMessage{
    messageID:  2,
    protocolOp: message.SearchRequest{
        baseObject:   &amp;quot;&amp;quot;,
        scope:        0,
        derefAliases: 3,
        sizeLimit:    0,
        timeLimit:    0,
        typesOnly:    false,
        filter:       &amp;quot;objectClass&amp;quot;,
        attributes:   {&amp;quot;subschemaSubentry&amp;quot;},
    },
    controls: (*message.Controls)(nil),
}

2014/10/25 17:54:07 Message: PROXY1 - SERVER - msg 2 
message.LDAPMessage{
    messageID:  2,
    protocolOp: message.SearchResultEntry{
        objectName: &amp;quot;&amp;quot;,
        attributes: {
            {
                type_: &amp;quot;subschemaSubentry&amp;quot;,
                vals:  {&amp;quot;cn=schema&amp;quot;},
            },
        },
    },
    controls: (*message.Controls)(nil),
}

2014/10/25 17:54:07 Message: PROXY1 - SERVER - msg 3 
message.LDAPMessage{
    messageID:  2,
    protocolOp: message.SearchResultDone{},
    controls:   (*message.Controls)(nil),
}

2014/10/25 17:54:07 Message: PROXY1 - CLIENT - msg 4 
message.LDAPMessage{
    messageID:  3,
    protocolOp: message.SearchRequest{
        baseObject:   &amp;quot;cn=schema&amp;quot;,
        scope:        0,
        derefAliases: 3,
        sizeLimit:    0,
        timeLimit:    0,
        typesOnly:    false,
        filter:       message.FilterEqualityMatch{attributeDesc:&amp;quot;objectClass&amp;quot;, assertionValue:&amp;quot;subschema&amp;quot;},
        attributes:   {&amp;quot;createTimestamp&amp;quot;, &amp;quot;modifyTimestamp&amp;quot;},
    },
    controls: (*message.Controls)(nil),
}

2014/10/25 17:54:07 Message: PROXY1 - SERVER - msg 4 
message.LDAPMessage{
    messageID:  3,
    protocolOp: message.SearchResultEntry{
        objectName: &amp;quot;cn=schema&amp;quot;,
        attributes: {
            {
                type_: &amp;quot;modifyTimestamp&amp;quot;,
                vals:  {&amp;quot;20090818022733Z&amp;quot;},
            },
            {
                type_: &amp;quot;createTimestamp&amp;quot;,
                vals:  {&amp;quot;20090818022733Z&amp;quot;},
            },
        },
    },
    controls: (*message.Controls)(nil),
}

2014/10/25 17:54:07 Message: PROXY1 - SERVER - msg 5 
message.LDAPMessage{
    messageID:  3,
    protocolOp: message.SearchResultDone{},
    controls:   (*message.Controls)(nil),
}

2014/10/25 17:54:07 Message: PROXY1 - CLIENT - msg 5 
message.LDAPMessage{
    messageID:  4,
    protocolOp: message.SearchRequest{
        baseObject:   &amp;quot;&amp;quot;,
        scope:        0,
        derefAliases: 0,
        sizeLimit:    0,
        timeLimit:    0,
        typesOnly:    false,
        filter:       &amp;quot;objectClass&amp;quot;,
        attributes:   {&amp;quot;namingContexts&amp;quot;, &amp;quot;subschemaSubentry&amp;quot;, &amp;quot;supportedLDAPVersion&amp;quot;, &amp;quot;supportedSASLMechanisms&amp;quot;, &amp;quot;supportedExtension&amp;quot;, &amp;quot;supportedControl&amp;quot;, &amp;quot;supportedFeatures&amp;quot;, &amp;quot;vendorName&amp;quot;, &amp;quot;vendorVersion&amp;quot;, &amp;quot;+&amp;quot;, &amp;quot;objectClass&amp;quot;},
    },
    controls: (*message.Controls)(nil),
}

2014/10/25 17:54:07 Message: PROXY1 - SERVER - msg 6 
message.LDAPMessage{
    messageID:  4,
    protocolOp: message.SearchResultEntry{
        objectName: &amp;quot;&amp;quot;,
        attributes: {
            {
                type_: &amp;quot;vendorName&amp;quot;,
                vals:  {&amp;quot;Apache Software Foundation&amp;quot;},
            },
            {
                type_: &amp;quot;vendorVersion&amp;quot;,
                vals:  {&amp;quot;2.0.0-M14&amp;quot;},
            },
            {
                type_: &amp;quot;objectClass&amp;quot;,
                vals:  {&amp;quot;top&amp;quot;, &amp;quot;extensibleObject&amp;quot;},
            },
            {
                type_: &amp;quot;subschemaSubentry&amp;quot;,
                vals:  {&amp;quot;cn=schema&amp;quot;},
            },
            {
                type_: &amp;quot;supportedLDAPVersion&amp;quot;,
                vals:  {&amp;quot;3&amp;quot;},
            },
            {
                type_: &amp;quot;supportedControl&amp;quot;,
                vals:  {&amp;quot;2.16.840.1.113730.3.4.3&amp;quot;, &amp;quot;1.3.6.1.4.1.4203.1.10.1&amp;quot;, &amp;quot;2.16.840.1.113730.3.4.2&amp;quot;, &amp;quot;1.3.6.1.4.1.4203.1.9.1.4&amp;quot;, &amp;quot;1.3.6.1.4.1.42.2.27.8.5.1&amp;quot;, &amp;quot;1.3.6.1.4.1.4203.1.9.1.1&amp;quot;, &amp;quot;1.3.6.1.4.1.4203.1.9.1.3&amp;quot;, &amp;quot;1.3.6.1.4.1.4203.1.9.1.2&amp;quot;, &amp;quot;1.3.6.1.4.1.18060.0.0.1&amp;quot;, &amp;quot;2.16.840.1.113730.3.4.7&amp;quot;, &amp;quot;1.2.840.113556.1.4.319&amp;quot;},
            },
            {
                type_: &amp;quot;supportedExtension&amp;quot;,
                vals:  {&amp;quot;1.3.6.1.4.1.1466.20036&amp;quot;, &amp;quot;1.3.6.1.4.1.1466.20037&amp;quot;, &amp;quot;1.3.6.1.4.1.18060.0.1.5&amp;quot;, &amp;quot;1.3.6.1.4.1.18060.0.1.3&amp;quot;, &amp;quot;1.3.6.1.4.1.4203.1.11.1&amp;quot;},
            },
            {
                type_: &amp;quot;supportedSASLMechanisms&amp;quot;,
                vals:  {&amp;quot;NTLM&amp;quot;, &amp;quot;GSSAPI&amp;quot;, &amp;quot;GSS-SPNEGO&amp;quot;, &amp;quot;CRAM-MD5&amp;quot;, &amp;quot;SIMPLE&amp;quot;, &amp;quot;DIGEST-MD5&amp;quot;},
            },
            {
                type_: &amp;quot;entryUUID&amp;quot;,
                vals:  {&amp;quot;f290425c-8272-4e62-8a67-92b06f38dbf5&amp;quot;},
            },
            {
                type_: &amp;quot;namingContexts&amp;quot;,
                vals:  {&amp;quot;ou=system&amp;quot;, &amp;quot;ou=schema&amp;quot;, &amp;quot;dc=example,dc=com&amp;quot;, &amp;quot;ou=config&amp;quot;},
            },
            {
                type_: &amp;quot;supportedFeatures&amp;quot;,
                vals:  {&amp;quot;1.3.6.1.4.1.4203.1.5.1&amp;quot;},
            },
        },
    },
    controls: (*message.Controls)(nil),
}

.....
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;evolutions:d9e41ffe1b2963ecd5511498bdeb05c1&#34;&gt;Evolutions&lt;/h1&gt;

&lt;p&gt;Ce proxy LDAP est un module que l&amp;rsquo;on peut brancher en frontal sur n&amp;rsquo;importe quel serveur LDAP. Il peut être modifié facilement pour répondre à certains besoins:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;répartition de charge&lt;/li&gt;
&lt;li&gt;contrôle d&amp;rsquo;accès&lt;/li&gt;
&lt;li&gt;contrôle et modification de requêtes à la volée, voire suppression de requêtes (firewall LDAP ?)&lt;/li&gt;
&lt;li&gt;diagnostique et qualité de service: vérification du temps de réponse du serveur, collecte de statistiques (par client, par type de requête&amp;hellip;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Evidemment, cela suppose que le trafic soit en clair. Les connections chiffrées (TLS) ne sont pas supportées pour le moment.&lt;/p&gt;

&lt;h1 id=&#34;conclusion:d9e41ffe1b2963ecd5511498bdeb05c1&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Le but de tout ceci était surtout de m&amp;rsquo;améliorer en Golang plus que de faire du LDAP. J&amp;rsquo;ai mis plus de temps à me trouver un style de programmation qu&amp;rsquo;à implémenter la RFC. Une fois cette étape franchie, j&amp;rsquo;ai déroulé la RFC et le proxy a fonctionné presque du premier coup à ma grande surprise !&lt;/p&gt;

&lt;p&gt;Une première version du code est disponible sur Github: &lt;a href=&#34;https://github.com/lor00x/goldap&#34;&gt;https://github.com/lor00x/goldap&lt;/a&gt;. Cette version est sans aucune garantie et nécessite encore beaucoup de travail.&lt;/p&gt;

&lt;p&gt;La prochaine étape sera l&amp;rsquo;encodage des structures LDAP.&lt;/p&gt;

&lt;p&gt;A suivre !&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Golang</title>
      <link>http://localhost:1313/post/go-go-go/</link>
      <pubDate>Sat, 13 Sep 2014 23:57:32 +0200</pubDate>
      
      <guid>http://localhost:1313/post/go-go-go/</guid>
      <description>

&lt;p&gt;Bonjour à tous !&lt;/p&gt;

&lt;p&gt;Je réfléchissais récemment aux différents langages de programmation que j&amp;rsquo;ai eu l&amp;rsquo;occasion de pratiquer, et je souhaitais vous faire part du petit nouveau, que j&amp;rsquo;espère bientôt rajouter sur mon CV ^_^.&lt;/p&gt;

&lt;h1 id=&#34;ils-sont-légions:2801839fe846f2e1d9db4ac306d62b0f&#34;&gt;Ils sont légions&lt;/h1&gt;

&lt;p&gt;Avez-vous déjà réfléchi au nombre de langages de programmation auxquels vous avez déjà eu affaire ? Pour ma part cela se résume ainsi:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;J&amp;rsquo;ai appris le &lt;em&gt;BASIC&lt;/em&gt; dès l&amp;rsquo;âge de 6 ans (hé oui !), ce qui a grandement joué sur mon avenir&amp;hellip;&lt;/li&gt;
&lt;li&gt;En école d&amp;rsquo;informatique, on m&amp;rsquo;a formé aux langages &amp;ldquo;courants&amp;rdquo;: &lt;em&gt;Assembleur, C, C++, Java&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Une fois débarqué en milieu professionel j&amp;rsquo;ai dû apprendre sur le tas d&amp;rsquo;autres langages, principalement: &lt;em&gt;Perl, PHP, HTML, CSS, Javascript&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Et de nombreux autres à des degrés de connaissance variés: &lt;em&gt;68000, Scheme, Lisp, Python, Groovy, Ruby, Powershell, Bash, Matlab&amp;hellip;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/2014/Sep/mini_bd.jpg&#34; alt=&#34;&#34; /&gt;
# A la recherche du langage&lt;/p&gt;

&lt;p&gt;Après plusieurs années de PHP je souhaitais me refaire la main sur un autre langage mais je ressentais une certaine frustration vis à vis de ce que proposaient les autres: arithmétique des pointeurs, gestion de la mémoire, fichier headers (.h) ainsi qu&amp;rsquo;un syntaxe complexe pour le C et le C++. Quand à Java, le côté verbeux, l&amp;rsquo;empreinte mémoire et la machine virtuelle me rebutaient. Ces raisons sont discutables et constituent uniquement mon ressenti global.&lt;/p&gt;

&lt;p&gt;Exit donc les langages classiques, il me fallait quelque chose de neuf&amp;hellip;&lt;/p&gt;

&lt;h1 id=&#34;go:2801839fe846f2e1d9db4ac306d62b0f&#34;&gt;Go !&lt;/h1&gt;

&lt;p&gt;C&amp;rsquo;est là que j&amp;rsquo;ai découvert &lt;a href=&#34;http://en.wikipedia.org/wiki/Go_%28programming_language%29&#34;&gt;Golang&lt;/a&gt; (Go pour les intimes). Créé par Google, et annoncé officiellement en 2009, ce langage a pioché les idées dans divers des langages cités plus haut. Il en offre, selon moi, un très bon compromis:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;La compilation produit un binaire unique sans dépendance. La phase d&amp;rsquo;édition de liens se fait donc de manière statique. La compilation s&amp;rsquo;effectue en un temps record grâce à une syntaxe simplifiée.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;La syntaxe est très simple, à l&amp;rsquo;opposé du &lt;em&gt;&amp;ldquo;More than one way to do it&amp;rdquo;&lt;/em&gt; du Perl ou des syntaxes multiples d&amp;rsquo;autres langages. Par exemple, Golang propose un mot-clé unique &lt;code&gt;for&lt;/code&gt; pour les boucles (pas de &lt;code&gt;foreach&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;do while&lt;/code&gt;, &lt;code&gt;do until&lt;/code&gt; &amp;hellip;). Les points-virgules &lt;code&gt;;&lt;/code&gt; en fin de ligne sont absents (en fait, ils sont ajoutés automatiquement à la compilation), tout comme le signe &lt;code&gt;$&lt;/code&gt; cher à PHP et Perl devant les variables. Les accolades &lt;code&gt;{ }&lt;/code&gt; délimitent toutefois les blocs de code, mais les parenthèses &lt;code&gt;( )&lt;/code&gt; ne sont pas obligatoires pour les clauses &lt;code&gt;if&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Le langage est fortement typé. Les types proposés de base sont: entier signé/non-signé de 8 à 64 bits &lt;code&gt;uint8&lt;/code&gt;, &lt;code&gt;int8&lt;/code&gt;&amp;hellip; &lt;code&gt;int64&lt;/code&gt;, réel &lt;code&gt;float32&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;, booleen &lt;code&gt;bool&lt;/code&gt;, chaine &lt;code&gt;string&lt;/code&gt;, rune &lt;code&gt;rune&lt;/code&gt; (charactère UTF-8), tableau (taille statique, par ex: &lt;code&gt;[5]int&lt;/code&gt;) et &amp;ldquo;slice&amp;rdquo; (taille dynamique, par ex: &lt;code&gt;[]int&lt;/code&gt;). A noter aussi en natif deux types permettant de manipuler les nombres complexes &lt;code&gt;complex32&lt;/code&gt;, &lt;code&gt;complex64&lt;/code&gt;. Les types composés sont déclarés au moyen de &lt;code&gt;struct&lt;/code&gt; similaires au C/C++. La plupart des erreurs de typage sont donc détectées à la compilation.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;La programmation objet est également très simplifiée: déclaration de types, d&amp;rsquo;interfaces et de méthodes&amp;hellip; et c&amp;rsquo;est tout ! Pas de classe abstraites, pas d&amp;rsquo;héritage (simple ni multiple), pas de surcharge de méthodes. Fichtre ! Mais comment vais-je donc mettre en oeuvre mes design pattern ? Haha ! Pas d&amp;rsquo;inquiétude, on peut très bien s&amp;rsquo;en sortir :-) Golang permet ainsi l&amp;rsquo;enfouissement de type, ce qui permet une forme d&amp;rsquo;héritage.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;La gestion de la mémoire: les pointeurs sont autorisés (&lt;code&gt;*int, &amp;amp;var&lt;/code&gt;) mais pas leur arithmétique, les variables doivent être déclarées, les tableaux peuvent être déclarés avec une taille statique ou dynamique (slices). L&amp;rsquo;allocation de la mémoire se fait donc automatiquement tout comme la libération qui est gérée par un ramasse-miettes, mais les pointeurs nous laissent décider du passage par valeur ou par référence.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On part donc sur de bonnes bases, mais ce n&amp;rsquo;est pas tout !&lt;/p&gt;

&lt;h1 id=&#34;les-petits-plus:2801839fe846f2e1d9db4ac306d62b0f&#34;&gt;Les petits plus&lt;/h1&gt;

&lt;p&gt;Golang présente nativement des fonctionalités que d&amp;rsquo;autres langages permettent seulement au prix d&amp;rsquo;outils ou de librairies annexes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Go intègre nativement la programmation concurrente. Un &lt;code&gt;go mafunction()&lt;/code&gt; permet de lancer une fonction de manière asynchrone. Pour communiquer entre les &amp;ldquo;goroutines&amp;rdquo;, on utilise les &amp;ldquo;channels&amp;rdquo; qui sont des canaux de communication fortement typés. Cela permet de faire de la programmation asynchrone de manière intuitive et lisible (pas d&amp;rsquo;utilisation de callback comme avec Nodejs).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;La ligne de commande permet de formater un programme Golang selon un standard unique lisible par tous, proche du &lt;a href=&#34;http://fr.wikipedia.org/wiki/Style_d%27indentation#Style_K.26R&#34;&gt;style K&amp;amp;R&lt;/a&gt;. D&amp;rsquo;autres langages ou IDE le proposent mais cette fonctionnalité prend tout son sens avec la syntaxe simplifiée: le code est concis et lisible par tous, même si certains grogneront à cause de l&amp;rsquo;accolade à la ligne ;-)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On peut exécuter directement un fichier golang, par exemple: &lt;code&gt;go run test.go&lt;/code&gt;. La compilation sera effectuée implicitement. Voilà qui fera plaisir à ceux qui ont l&amp;rsquo;habitude des langages de script.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Une commande &lt;code&gt;godoc&lt;/code&gt; permet de générer la documentation à partir du code et même de lancer un serveur web pour la consulter directement.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Une commande permet &lt;code&gt;go test&lt;/code&gt; de lancer les tests unitaires que vous n&amp;rsquo;aurez pas manqué d&amp;rsquo;écrire ;-) Un ajout de l&amp;rsquo;option &lt;code&gt;-test.bench=&amp;quot;Benchmark*&amp;quot;&lt;/code&gt; permet de lancer un benchmark sur toutes les fonctions dont le nom correspond au schéma spécifié.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Goland intègre également un outil de profiling. Cet outil dispose d&amp;rsquo;un affichage du graphes des appels de fonctions, ce qui permet en un coup d&amp;rsquo;oeil de se faire une idée du flux d&amp;rsquo;exécution et de détecter les goulots d&amp;rsquo;étranglement (voir &lt;a href=&#34;http://blog.golang.org/profiling-go-programs&#34;&gt;ici&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La liste n&amp;rsquo;est pas exhaustive, des astuces de programmation rendent la vie plus facile. Par exemple, bien que l&amp;rsquo;on puisse déclarer des interfaces, le mot-clé &lt;code&gt;implement&lt;/code&gt; n&amp;rsquo;existe pas, car tout type dont la signature des méthodes correspond à une interface va automatiquement implémenter cette interface. Autre cas pratique: une méthode peut être appelée indifféremment sur un type ou sur un pointeur de type, Golang traduira automatiquement l&amp;rsquo;appel sans qu&amp;rsquo;on ait à jouer avec &lt;code&gt;*&lt;/code&gt; ou &lt;code&gt;&amp;amp;&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;pour-aller-plus-loin:2801839fe846f2e1d9db4ac306d62b0f&#34;&gt;Pour aller plus loin&lt;/h1&gt;

&lt;p&gt;Pour ceux qui ne connaissaient pas Golang, j&amp;rsquo;espère avoir titillé votre curiosité. Je vous conseille d&amp;rsquo;aller jeter un coup d&amp;rsquo;oeil sur le &lt;a href=&#34;http://golang.org/&#34;&gt;site&lt;/a&gt; et le &lt;a href=&#34;http://blog.golang.org/&#34;&gt;blog&lt;/a&gt; officiels.&lt;/p&gt;

&lt;p&gt;De nombreux projets Golang voient le jour sur Github et autres plate-formes de partage de code. Je citerais parmi eux &lt;a href=&#34;https://github.com/docker/docker&#34;&gt;Docker&lt;/a&gt;, un système de virtualisation par containers que j&amp;rsquo;utilise d&amp;rsquo;ailleurs pour héberger ce blog.&lt;/p&gt;

&lt;h1 id=&#34;place-à-l-action:2801839fe846f2e1d9db4ac306d62b0f&#34;&gt;Place à l&amp;rsquo;action&lt;/h1&gt;

&lt;p&gt;Tout ça c&amp;rsquo;est bien beau, mais la maîtrise d&amp;rsquo;un langage ne s&amp;rsquo;acquiert que par la pratique. Il me fallait donc un projet pour débuter la programmation en Golang. Un de mes amis souhaitant lui aussi se lancer dans cette aventure, nous avons décidé de nous pencher sur le protocole LDAP et de le réimplémenter chacun de notre côté.&lt;/p&gt;

&lt;p&gt;Mais ceci fera l&amp;rsquo;objet du prochain article ;-)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hackathon Société Générale - Jour 1</title>
      <link>http://localhost:1313/post/hackathon-premier-essai/</link>
      <pubDate>Mon, 02 Jun 2014 22:20:16 +0200</pubDate>
      
      <guid>http://localhost:1313/post/hackathon-premier-essai/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/2014/May/hackathonsg_cut.png&#34; alt=&#34;&#34; /&gt;
Du 23 au 25 Mai avait lieu le &lt;a href=&#34;http://hackathonsg.bemyapp.com/&#34;&gt;Hackathon Société Générale&lt;/a&gt;. Organisé par BeMyApp et la Société Générale, ce hackaton se déroulait à &lt;a href=&#34;http://www.42.fr/&#34;&gt;l&amp;rsquo;école 42&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;C&amp;rsquo;était l&amp;rsquo;occasion de participer à mon premier hackathon, de découvrir l&amp;rsquo;Ecole 42 et de me faire plaisir en codant des trucs super cools en compagnie d&amp;rsquo;élèves motivés et compétents ! Dit comme ça c&amp;rsquo;est vendeur, non ? :-)&lt;/p&gt;

&lt;p&gt;Je détaille ici le démarrage du hackathon le vendredi soir. Valère en a fait de même &lt;a href=&#34;http://vjeantet.fr/hackaton-societe-generale-jour-1/&#34;&gt;sur son blog&lt;/a&gt;. Merci à &lt;a href=&#34;http://soskuld.over-blog.net/&#34;&gt;Skuld&lt;/a&gt; pour les dessins !&lt;/p&gt;

&lt;h2 id=&#34;c-est-quoi-un-hackathon:5440e36561bf673082bf02c9b7b321bd&#34;&gt;C&amp;rsquo;est quoi un hackathon ?&lt;/h2&gt;

&lt;p&gt;Comme l&amp;rsquo;explique &lt;a href=&#34;http://fr.wikipedia.org/wiki/Hackathon&#34;&gt;la fiche Wikipedia&lt;/a&gt;, c&amp;rsquo;est un marathon informatique où des développeurs vont créer des prototypes d&amp;rsquo;applications en un temps très limité, généralement un week-end. La difficulté de l&amp;rsquo;exercice est de constituer une équipe et de composer avec les capacités et envies de chacun pour collaborer à la production d&amp;rsquo;un prototype fonctionnel. Un jury désigne les gagnants à l&amp;rsquo;issue du temps imparti.&lt;/p&gt;

&lt;h1 id=&#34;vendredi:5440e36561bf673082bf02c9b7b321bd&#34;&gt;Vendredi&lt;/h1&gt;

&lt;p&gt;Le hackathon démarrait le vendredi à 19h, au programme de cette première soirée:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pitchs de présentation des projets&lt;/li&gt;
&lt;li&gt;constitution des équipes&lt;/li&gt;
&lt;li&gt;votes du jury pour désigner les meilleurs pitchs&lt;/li&gt;
&lt;li&gt;démarrage des projets&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;pitch-de-démarrage:5440e36561bf673082bf02c9b7b321bd&#34;&gt;Pitch de démarrage&lt;/h2&gt;

&lt;p&gt;Le hackathon SG accueillait porteurs d&amp;rsquo;idées, développeurs et designers. La soirée du vendredi a débuté par une présentation des projets de développement. Chaque porteur d&amp;rsquo;idée avait 1 minute chrono pour expliquer son projet. J&amp;rsquo;ai moi aussi fait mon petit discours, ce qui est en soit un exploit étant donné le stress engendré par l&amp;rsquo;idée de parler devant 200 personnes ! :D&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/2014/Jun/Hackaton-3.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;l-annuaire-des-technos:5440e36561bf673082bf02c9b7b321bd&#34;&gt;L&amp;rsquo;annuaire des technos&lt;/h2&gt;

&lt;p&gt;Mon idée était de lister les &amp;ldquo;cartes de visite techniques&amp;rdquo; des équipes de développement au sein d&amp;rsquo;une entreprise (ou sur internet). Chaque carte de visite exposerait les technologies, langages, outils et méthodes de développement employés par les équipes. Ainsi, un développeur faisant partie d&amp;rsquo;une équipe pourrait retrouver facilement les équipes proches techniquement pour échanger ou résoudre une problématique lié à une technologie commune. Un manager requérant des compétences précises pour créer une équipe de dev saurait si ces compétences sont disponibles et où elles se trouvent.&lt;/p&gt;

&lt;h2 id=&#34;constitution-des-équipes:5440e36561bf673082bf02c9b7b321bd&#34;&gt;Constitution des équipes&lt;/h2&gt;

&lt;p&gt;Après les pitchs, tout le monde s&amp;rsquo;est réuni autour d&amp;rsquo;un buffet de sushis, l&amp;rsquo;occasion pour les développeurs de discuter avec les porteurs d&amp;rsquo;idées. Ces derniers s&amp;rsquo;étaient vus affublés d&amp;rsquo;une pancarte portant le nom de leur projet et d&amp;rsquo;un gobelet destiné à recueillir les jetons symbolisant le soutien des personnes souhaitant y participer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/2014/Jun/projet_frais-1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Je souhaitais développer une appli web avec un frontend en Javascript et un backend PHP présentant une API REST. Quatre élèves de l&amp;rsquo;Ecole 42 ont manifesté leur intérêt pour mon projet et le souhait d&amp;rsquo;utiliser Angular JS pour l&amp;rsquo;interface. L&amp;rsquo;équipe a également accueilli un consultant en informatique spécialisé sur Drupal. Enfin un autre porteur d&amp;rsquo;idée, &lt;a href=&#34;http://vjeantet.fr/&#34;&gt;Valère&lt;/a&gt;, ayant reçu moins de soutien, s&amp;rsquo;est joint à l&amp;rsquo;équipe. Nous voilà donc sept personnes !&lt;/p&gt;

&lt;h2 id=&#34;vote-du-jury-pour-les-meilleurs-pitchs:5440e36561bf673082bf02c9b7b321bd&#34;&gt;Vote du jury pour les meilleurs pitchs&lt;/h2&gt;

&lt;p&gt;Pendant la constitution des équipes, le jury se réunissait pour élire les meilleurs pitchs de présentation. Les cinq premiers gagnaient un Nerf !&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/2014/May/nerf_small.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Voilà les premières équipes armées pour le week-end. De quoi déconcentrer les autres équipes en plein travail. Hé oui, le monde du développement est impitoyable ! D&amp;rsquo;autres concours annexes seront organisés au cours du week-end avec d&amp;rsquo;autre Nerfs à gagner.&lt;/p&gt;

&lt;p&gt;## Démarrage des projets&lt;/p&gt;

&lt;p&gt;Une fois constituées, les équipes se sont installées au &amp;ldquo;cluster&amp;rdquo;. Le cluster, c&amp;rsquo;est l&amp;rsquo;ensemble constitué des trois salles principales de l&amp;rsquo;Ecole 42. Destinée au travail intensif, chacune contient 300 iMac en libre service pour les élèves 24h/24, 7j/7. La salle de notre étage comportait aussi une salle de repos pour que les plus irréductibles puissent s&amp;rsquo;accorder un peu de repos entre deux séances de code intensif.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/2014/May/cluster1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;La discussion de la soirée a porté sur les choix techniques.&lt;/p&gt;

&lt;h3 id=&#34;frontend-angular-js:5440e36561bf673082bf02c9b7b321bd&#34;&gt;Frontend: Angular JS&lt;/h3&gt;

&lt;p&gt;Il était acquis que notre interface serait développée en &lt;a href=&#34;https://angularjs.org/&#34;&gt;Angular JS&lt;/a&gt;, utilisant des appels Ajax pour interroger le backend et récupérer les données au format JSON. Trois des étudiants se chargeaient de cette partie.&lt;/p&gt;

&lt;h3 id=&#34;backend-drupal-commons-mysql:5440e36561bf673082bf02c9b7b321bd&#34;&gt;Backend: Drupal Commons / Mysql&lt;/h3&gt;

&lt;p&gt;Etant donné que notre application s&amp;rsquo;apparentait à un site communautaire, notre consultant Drupal a proposé d&amp;rsquo;utiliser &lt;a href=&#34;https://drupal.org/project/commons&#34;&gt;Drupal Commons&lt;/a&gt; pour exposer une API REST. Ne connaissant pas Drupal, j&amp;rsquo;ai accepté l&amp;rsquo;idée d&amp;rsquo;en apprendre plus sur ce framework.&lt;/p&gt;

&lt;h3 id=&#34;backend-silex-mysql:5440e36561bf673082bf02c9b7b321bd&#34;&gt;Backend: Silex / Mysql&lt;/h3&gt;

&lt;p&gt;Etant donnée le risque non-négligeable de ne pas arriver à maîtriser Drupal en une journée, Valère à commencé à coder une API à partir de &lt;a href=&#34;http://silex.sensiolabs.org/&#34;&gt;Silex&lt;/a&gt;, un micro-framework PHP. Notre dernière étudiante se chargeait de créer le schéma d&amp;rsquo;une base Mysql.&lt;/p&gt;

&lt;h2 id=&#34;fin-de-journée:5440e36561bf673082bf02c9b7b321bd&#34;&gt;Fin de journée&lt;/h2&gt;

&lt;p&gt;Les tâches distribuées, et la semaine précédent le hackathon ayant été chargée, chacun est ensuite parti se reposer histoire de débuter frais et dispo tôt le lendemain matin. Parce qu&amp;rsquo;un équipe reposée est plus efficace ;-)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bonjour monde !</title>
      <link>http://localhost:1313/post/bonjour-monde/</link>
      <pubDate>Sun, 13 Apr 2014 18:23:39 +0200</pubDate>
      
      <guid>http://localhost:1313/post/bonjour-monde/</guid>
      <description>&lt;p&gt;&lt;strong&gt;r00x&lt;/strong&gt;: Bonjour, cher visiteur. Soyez le bienvenu sur ce blog.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Visiteur&lt;/strong&gt;: - C&amp;rsquo;est quoi ce blog ?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;r00x&lt;/strong&gt;: - C&amp;rsquo;est un moyen de partager sur des sujets liés à l&amp;rsquo;informatique.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Visiteur&lt;/strong&gt;: - Donc tu travailles dans l&amp;rsquo;informatique ?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;r00x&lt;/strong&gt;: - Oui. Au quotidien, je fais de la gestion de projets développés en PHP et liés à l&amp;rsquo;IAM (Identify and Access Management). Mais je m&amp;rsquo;efforce de rester au courant des dernières nouveautés et tendances et d&amp;rsquo;en expérimenter à titre personnel. Ce blog en est le premier témoignage visible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Visiteur&lt;/strong&gt;: - Et tu comptes poster souvent ?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;r00x&lt;/strong&gt;: - Cela dépendra de mon temps libre et des sujets intéressants que j&amp;rsquo;ai à raconter :-) Les nouveautés ne manquent pas: langages, bibliothèques, frameworks, outils, architectures&amp;hellip; mais aussi bugs, failles critiques, corrections, piratages, legislations&amp;hellip; Je partagerai avant tout ce que j&amp;rsquo;ai pu tester et mettre en oeuvre, histoire d&amp;rsquo;apporter ma modeste pierre à l&amp;rsquo;édifice de connaissances construit par de nombreux autres sur Internet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Visiteur&lt;/strong&gt;: - Super j&amp;rsquo;ai hâte de voir ça !&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;r00x&lt;/strong&gt;: - Moi aussi, encore bienvenue et merci d&amp;rsquo;être passé ! Vous pourrez également me retrouver sur Twitter: &lt;a href=&#34;https://twitter.com/R00xThomas&#34;&gt;https://twitter.com/R00xThomas&lt;/a&gt;. A bientôt !&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>